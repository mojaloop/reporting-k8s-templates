{{- if .Values.templates.multilateralSettlement -}}

apiVersion: mojaloop.io/v1
kind: MojaloopReport
metadata:
  name: report-multilateral-settlement
  {{ include "common.annotations" . | nindent 2 }}
spec:
  endpoint:
    params:
      - name: settlementId
        required: true
    path: /report-multilateral-settlement
  permission: transferApi
  queries:
    - name: settlementInfoResult
      query: >
        SELECT
            s.settlementId,
            s.createdDate,
            ssc.settlementStateId as currentState,
            ssc.createdDate as lastStateUpdate,
            sSW.createdDate as windowCreatedDate,
            sSW.settlementWindowId,
            MIN(sWSCOpen.createdDate) as windowOpenDate,
            MAX(sWSCClosed.createdDate) as windowClosedDate
        FROM settlement s
        INNER JOIN settlementSettlementWindow sSW
                on s.settlementId = sSW.settlementId
        INNER JOIN settlementWindowStateChange sWSCOpen
                on sSW.settlementWindowId = sWSCOpen.settlementWindowId AND sWSCOpen.settlementWindowStateId = 'OPEN'
        INNER JOIN settlementWindowStateChange sWSCClosed
                on sSW.settlementWindowId = sWSCClosed.settlementWindowId AND sWSCClosed.settlementWindowStateId = 'CLOSED'
        INNER JOIN settlementStateChange ssc
            on s.currentStateChangeId = ssc.settlementStateChangeId
        WHERE s.settlementId = :settlementId
        GROUP BY s.settlementId, sSW.settlementWindowId;
    - name: settlementParticipantCurrencyIdsResult
      query: >
        SELECT
            result1.participantCurrencyId as participantCurrencyId,
            SUM(result1.amount) as netAmount
        FROM

        (SELECT
            pc.participantCurrencyId,
            unioned.transferId,
            unioned.uniqueLegId,
            SUM(unioned.change) as amount
        FROM (
            SELECT
                ppc.participantCurrencyId,
                ppc.change,
                tf.settlementWindowId,
                tf.transferId AS transferId,
                tf.transferId AS uniqueLegId
            FROM
                transferFulfilment AS tf
            INNER JOIN
                transferStateChange AS tsc
                ON tsc.transferId = tf.transferId
            INNER JOIN
                participantPositionChange AS ppc
                ON ppc.transferStateChangeId = tsc.transferStateChangeId
            INNER JOIN
                settlementParticipantCurrency AS spc
                ON ppc.participantCurrencyId = spc.participantCurrencyId AND spc.settlementId = :settlementId
            INNER JOIN
                settlementSettlementWindow ssw
                ON tf.settlementWindowId = ssw.settlementWindowId AND ssw.settlementId = :settlementId

            UNION ALL

            SELECT
                ppc.participantCurrencyId,
                ppc.change,
                fxtf.settlementWindowId,
                fxt1.determiningTransferId AS transferId,
                fxt1.commitRequestId AS uniqueLegId
            FROM
                fxTransferFulfilment AS fxtf
            INNER JOIN
                fxTransfer AS fxt1
                ON fxt1.commitRequestId = fxtf.commitRequestId
            INNER JOIN
                fxTransferStateChange AS fxtsc
                ON fxtsc.commitRequestId = fxtf.commitRequestId
            INNER JOIN
                participantPositionChange AS ppc
                ON ppc.fxTransferStateChangeId = fxtsc.fxTransferStateChangeId
            INNER JOIN
                settlementParticipantCurrency AS spc
                ON ppc.participantCurrencyId = spc.participantCurrencyId AND spc.settlementId = :settlementId
            INNER JOIN
                settlementSettlementWindow ssw
                ON fxtf.settlementWindowId = ssw.settlementWindowId AND ssw.settlementId = :settlementId
        ) AS unioned INNER JOIN
            participantCurrency AS pc
            ON pc.participantCurrencyId = unioned.participantCurrencyId
        GROUP BY
            pc.participantCurrencyId,
            unioned.transferId,
            unioned.uniqueLegId
        ORDER BY unioned.transferId ) as result1
        GROUP BY result1.participantCurrencyId;
    - name: allParticipantCurrencyIds
      query: >
        SELECT
          pc.participantCurrencyId,
          pc.participantId,
          pc.currencyId,
          p.name,
          p.description,
          p.isProxy
        FROM participantCurrency AS pc
        INNER JOIN
            participant AS p
            ON pc.participantId = p.participantId
        ORDER BY pc.participantCurrencyId;
  template: |
    <!DOCTYPE html>
    <html lang="en">

    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Multilateral Settlement Report</title>
        <style>
            body {
                font-family: 'Arial', sans-serif;
                background-color: #f5f5f5;
                margin: 0;
                padding: 20px;
                color: #333;
            }

            .container {
                max-width: 100%;
                margin: 0 auto;
                background-color: #fff;
                padding: 20px;
                box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            }

            .grid-container {
                display: grid;
                grid-template-columns: repeat(2, 1fr);
                gap: 20px;
            }

            .grid-block {
                padding: 2px;
                border-radius: 8px;
            }

            .header {
                display: flex;
                justify-content: space-between;
                align-items: center;
                border-bottom: 2px solid #00447c;
                padding-bottom: 10px;
            }

            .header h1 {
                margin: 0;
                color: #00447c;
                font-size: 24px;
            }

            .header img {
                max-height: 50px;
            }

            .summary {
                margin-top: 20px;
                padding: 15px;
                background-color: #e9f3fa;
                border-left: 6px solid #00447c;
                border-radius: 5px;
                box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
                max-width: 500px;
            }

            .summary p {
                margin: 5px 0;
                font-weight: bold;
            }

            table {
                width: 100%;
                border-collapse: collapse;
                margin-top: 20px;
            }

            table, th, td {
                border: 1px solid #ddd;
            }

            th {
                background-color: #00447c;
                color: #fff;
                padding: 10px;
                font-size: 1.0em;
            }

            td {
                line-height: 1.6;
                padding: 10px;
                text-align: left;
                font-size: 0.9em;
            }

            tr:nth-child(even) {
                background-color: #f2f2f2;
            }

            .smallFont {
                font-size: 0.7em;
            }

            .thStyle {
                background-color: #00447c;
                color: #fff;
                padding: 10px;
                font-size: 1.0em;
                margin-bottom: 10px;
            }

            .thGroupBy {
                background-color: #cfdbeb;
                padding: 10px;
                font-size: 1.0em;
                font-weight: bold;
            }

            .thSeparator {
                background-color: #ffffff;
                padding: 2px;
            }

            .button-link {
                display: inline-block;
                padding: 10px 20px;
                font-size: 16px;
                color: #fff;
                background-color: #007bff;
                text-decoration: none;
                border-radius: 5px;
                transition: background-color 0.3s, transform 0.2s;
                font-weight: 500;
                box-shadow: 0 4px 8px rgba(0, 123, 255, 0.2);
            }

            .button-link:hover {
                background-color: #0056b3;
                transform: translateY(-2px);
                box-shadow: 0 6px 12px rgba(0, 86, 179, 0.3);
            }

            .button-link:active {
                transform: translateY(0);
                box-shadow: 0 4px 8px rgba(0, 86, 179, 0.2);
            }

            .highlight-link {
                color: #007bff;
                text-decoration: none;
                padding: 3px 5px;
                border-radius: 3px;
                transition: background-color 0.2s, color 0.2s;
            }

            .highlight-link:hover {
                background-color: #00447c;
                color: white;
            }

            .footer {
                margin-top: 20px;
                text-align: center;
                font-size: 0.9em;
                color: #666;
            }

            .footer p {
                margin: 5px 0;
            }
        </style>
    </head>
    <body >
        <%
        const outputSettlementRowsWithDetails = settlementParticipantCurrencyIdsResult.map((settlementRow) => {
            const participantCurrencyId = settlementRow.participantCurrencyId;
            const participantCurrencyDetails = allParticipantCurrencyIds.find((participantCurrencyId) => participantCurrencyId.participantCurrencyId === settlementRow.participantCurrencyId);
            return {
            ...settlementRow,
            netAmountDisplay: settlementRow.netAmount <= 0 ? Math.abs(settlementRow.netAmount) : `(${settlementRow.netAmount})`,
            participantCurrencyDetails
            };
        });

        const groupedByCurrencyId = outputSettlementRowsWithDetails.reduce((acc, record) => {
            const currencyId = record.participantCurrencyDetails.currencyId;
            if (!acc[currencyId]) {
                acc[currencyId] = [];
            }
            acc[currencyId].push(record);
            return acc;
        }, {});

        const settlementInfo = settlementInfoResult[0];
        const dataForJson = {
            settlementInfo,
            groupedByCurrencyId
        };
        %>
        <div class="container">
            <div class="header">
                <h1>Multilateral Settlement Report</h1>
                <img src="" alt="Logo">
            </div>

            <div class="summary">
                <p>Settlement ID: <%= settlementInfo?.settlementId %></p>
                <p>State: <%= settlementInfo?.currentState %></p>
                <p>Earliest Window Start: <%= settlementInfo?.windowOpenDate.toISOString() %></p>
                <p>Latest Window Finish: <%= settlementInfo?.windowClosedDate.toISOString() %></p>
                <p>Created Date: <%= settlementInfo?.createdDate.toISOString() %></p>
                <p>Last State Update: <%= settlementInfo?.lastStateUpdate.toISOString() %></p>
            </div>

            <table cellpadding='0' cellspacing='0' data-json="<%= JSON.stringify(dataForJson) %>">
                <tbody>
                    <tr>
                        <th>Participant</th>
                        <th>Currency</th>
                        <th>Net Settlement Amount</th>
                    </tr>
                    <% for (let currencyId in groupedByCurrencyId) { %>
                        <tr>
                            <td class='thGroupBy' colspan='100%'><%= currencyId %></td>
                        </tr>
                    <% for(let sd of groupedByCurrencyId[currencyId]) { %>
                        <tr>
                            <td><%= sd.participantCurrencyDetails.name %></td>
                            <td><%= sd.participantCurrencyDetails.currencyId %></td>
                            <td><%= sd.netAmountDisplay %></td>
                        </tr>
                    <% } %>
                        <tr>
                        <td class='thSeparator' colspan='100%'></td>
                        </tr>
                    <% } %>
                </tbody>
            </table>


            <div class="footer">
                <p><i>NOTE: In the report, amounts enclosed in parentheses represent negative balances, indicating a payable obligation of the participant to the switch.</i></p>
                <br />
                <p>Generated on: <%= (new Date()).toUTCString() %></p>
            </div>
        </div>

    </body>
    </html>

{{- end }}
