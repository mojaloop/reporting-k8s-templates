{{- if .Values.templates.transactionReconciliation -}}

apiVersion: mojaloop.io/v1
kind: MojaloopReport
metadata:
  name: {{ printf "%s-%s" .Release.Name "tx-reconciliation" | trimPrefix "-" }}
  {{ include "common.annotations" . | nindent 2 }}
spec:
  permission: report-tx-reconciliation
  endpoint:
    path: /transactionReconciliation
    params:
      - name: settlementWindowId
      - name: dfspId
        required: true
  queries:
    - name: legacyTransferReport
      query: |
        SELECT DISTINCT
          qt.quoteId AS quoteId,
          payerPart.name AS senderDFSPId,
          payerPart.name AS senderDFSPName,
          payeeQp.fspId AS receiverDFSPId,
          payeePart.name AS receiverDFSPName,
          tfr.transferId AS hubTxnID,
          IF(txnSce.name = 'TRANSFER', 'P2P', (IF(txnSce.name = 'TRANSFER', 'MP', NULL))) AS transactionType,
          IF(qt.transactionRequestId IS NULL, 'Original', 'Reversal') AS natureOfTxnType,
          qt.createdDate AS requestDate,
          tfr.createdDate AS createdDate,
          IF(ssc.settlementStateId = 'SETTLED', ssc.createdDate, Cast(NULL as datetime)) AS settlementDate,
          payerQp.currencyId AS senderCountryCurrencyCode,
          payeeQp.currencyId AS receiverCountryCurrencyCode,
          payerQp.partyIdentifierValue AS senderId,
          payeeQp.partyIdentifierValue AS receiverId,
          tfr.amount AS reconciliationAmount,
          IF((payeeParty.firstName <> NULL && payeeParty.lastName <> NULL), 'RNR', 'RNND') AS receiverNameStatus,
          '' AS pricingOption,
          '' AS receiverKYCLevelStatus,
          ts.transferStateId AS status,
          ts.createdDate as modificationDate,
          '' AS errorCode,
          tfr.transferId AS senderDFSPTxnID,
          tfr.transferId AS receiverDFSPTxnID,
          IF(xfrFul.settlementWindowId IS NULL, '', Cast(xfrFul.settlementWindowId as char)) AS settlementWindowId,
          ssc.settlementStateId AS settlementState,
          ssc.createdDate AS settlementStateChangeDate
        FROM
          quote qt
        INNER JOIN
          transactionReference txnref
          ON qt.quoteId = txnref.quoteId
        INNER JOIN
          transactionScenario txnSce
          ON qt.transactionScenarioId = txnSce.transactionScenarioId
        INNER JOIN
          quoteParty payerQp
          ON qt.quoteId = payerQp.quoteId AND payerQp.partyTypeId = '1'
        INNER JOIN
          quoteParty payeeQp
          ON qt.quoteId = payeeQp.quoteId AND payeeQp.partyTypeId = '2'
        INNER JOIN
          participant payerPart
          ON payerQp.participantId = payerPart.participantId
        INNER JOIN
          participant payeePart
          ON payeeQp.participantId = payeePart.participantId
        INNER JOIN
          quoteResponse qr
          ON qr.quoteId = qt.quoteId
        INNER JOIN
          transfer tfr
          ON tfr.transferId = txnref.transactionReferenceId
        LEFT JOIN
          transferFulfilment xfrFul
          ON xfrFul.transferId = tfr.transferId
        LEFT JOIN
          party payerParty
          ON payerQp.partyTypeId = payerParty.partyId
        LEFT JOIN
          party payeeParty
          ON payerQp.partyTypeId = payeeParty.partyId
        LEFT JOIN
          settlementSettlementWindow ssw
          ON ssw.settlementWindowId = xfrFul.settlementWindowId
        LEFT JOIN
          settlement sett
          ON sett.settlementId = ssw.settlementId
        LEFT JOIN
          settlementStateChange ssc
          ON ssc.settlementStateChangeId = sett.currentStateChangeId
        LEFT JOIN
          (
              SELECT tsc.transferId, tsc.transferStateId, tsc.createdDate
              FROM
                  transferStateChange tsc
              INNER JOIN
                  (
                      SELECT
                          MAX(tsc.transferStateChangeId) AS transferStateChangeId,
                          tsc.transferId
                      FROM
                          transferStateChange tsc
                      GROUP BY transferId
                  ) mtsc
                  ON mtsc.transferId = tsc.transferId AND tsc.transferStateChangeId = mtsc.transferStateChangeID
          ) ts
          ON ts.transferId = tfr.transferId
        WHERE
          (payerPart.name = :dfspId OR payeePart.name = :dfspId)
        AND
          (xfrFul.settlementWindowId = :settlementWindowId OR :settlementWindowId IS NULL)
    - name: dfspInfo
      query: |
        SELECT participantId, name FROM participant WHERE name = :dfspId AND name != 'Hub'
    - name: getSettlementWindow
      query: |
        SELECT sw.* FROM central_ledger.settlement as s
        JOIN settlementSettlementWindow as ssw on ssw.settlementId = s.settlementId
        JOIN settlementWindow as sw on sw.settlementWindowId = ssw.settlementWindowId
        WHERE sw.settlementWindowId = :settlementWindowId;
    - name: allParticipantCurrencyIds
      query: >
        SELECT
          pc.participantCurrencyId,
          pc.participantId,
          pc.currencyId,
          p.name,
          p.description,
          p.isProxy
        FROM participantCurrency AS pc
        INNER JOIN
            participant AS p
            ON pc.participantId = p.participantId
        ORDER BY pc.participantCurrencyId;
    - name: getFxPositionMovementsForSettlementWindow
      query: |
        SELECT
          result1.transferId as transferId,
          result1.settlementWindowId as settlementWindowId,
          result1.participantCurrencyId as participantCurrencyId,
          SUM(result1.amount) as netAmount,
          result1.swOpenCreated,
          result1.swClosedCreated,
          result1.fxTransferCreatedDate as fxTransferCreatedDate
        FROM
          (
            SELECT
              sw.settlementWindowId,
              pc.participantCurrencyId,
              swOpen.createdDate as swOpenCreated,
              swClose.createdDate as swClosedCreated,
              unioned.transferId,
              unioned.uniqueLegId,
              SUM(unioned.change) as amount,
              unioned.fxTransferCreatedDate as fxTransferCreatedDate
            FROM
              (
                SELECT
                  ppc.participantCurrencyId,
                  ppc.change,
                  fxtf.settlementWindowId,
                  fxt1.determiningTransferId AS transferId,
                  fxt1.commitRequestId AS uniqueLegId,
                  fxt1.createdDate AS fxTransferCreatedDate
                FROM
                  fxTransferFulfilment AS fxtf
                  INNER JOIN fxTransfer AS fxt1 ON fxt1.commitRequestId = fxtf.commitRequestId
                  INNER JOIN fxTransferStateChange AS fxtsc ON fxtsc.commitRequestId = fxtf.commitRequestId
                  INNER JOIN participantPositionChange AS ppc ON ppc.fxTransferStateChangeId = fxtsc.fxTransferStateChangeId
                  INNER JOIN settlementSettlementWindow ssw ON fxtf.settlementWindowId = ssw.settlementWindowId AND ssw.settlementWindowId = :settlementWindowId
                  INNER JOIN settlementParticipantCurrency AS spc ON ppc.participantCurrencyId = spc.participantCurrencyId AND spc.settlementId = ssw.settlementId
              ) AS unioned
              INNER JOIN participantCurrency AS pc ON pc.participantCurrencyId = unioned.participantCurrencyId
              INNER JOIN participant AS p ON p.participantId = pc.participantId
              INNER JOIN settlementWindow as sw ON sw.settlementWindowId = unioned.settlementWindowId
              INNER JOIN central_ledger.settlementWindowStateChange AS swOpen ON swOpen.settlementWindowId = unioned.settlementWindowId
              LEFT OUTER JOIN central_ledger.settlementWindowStateChange AS swClose ON swClose.settlementWindowId = unioned.settlementWindowId
              AND swClose.settlementWindowStateId = 'CLOSED'
            WHERE
              swOpen.settlementWindowStateId = 'OPEN'
            GROUP BY
              sw.settlementWindowId,
              pc.participantCurrencyId,
              swOpen.createdDate,
              swClose.createdDate,
              unioned.transferId,
              unioned.uniqueLegId,
              unioned.fxTransferCreatedDate
            ORDER BY
              unioned.transferId
          ) as result1
        GROUP BY
          result1.settlementWindowId,
          result1.participantCurrencyId,
          result1.swOpenCreated,
          result1.swClosedCreated,
          result1.transferId,
          result1.fxTransferCreatedDate

    - name: getFxQuoteConversionTerms
      query: |
        SELECT * FROM central_ledger.fxQuoteConversionTerms;
    - name: getLatestSettlementWindowState
      query: |
        SELECT settlementWindowId, settlementWindowStateId
        FROM (
        SELECT settlementWindowId, settlementWindowStateId,
            ROW_NUMBER() OVER (PARTITION BY settlementWindowId ORDER BY createdDate DESC) as rn
        FROM central_ledger.settlementWindowStateChange
        ) t
        WHERE rn = 1;
    - name : getSettlementsByDeterminingTransferId
      query: |
        SELECT
          ft.determiningTransferId as determiningTransferId,
          ssc.settlementStateId as settlementState,
          ssc.createdDate as settlementStateChangeDate
        FROM central_ledger.settlementWindow as sw
        JOIN settlementSettlementWindow as ssw ON ssw.settlementWindowId = sw.settlementWindowId
        JOIN settlement as s ON s.settlementId = ssw.settlementId
        JOIN fxTransferFulfilment as ftf ON ftf.settlementWindowId = sw.settlementWindowId
        JOIN fxTransfer as ft ON ft.commitRequestId = ft.commitRequestId
        JOIN settlementStateChange as ssc ON s.currentStateChangeId = ssc.settlementStateChangeId
        JOIN settlementState as ss on ss.settlementStateId = ssc.settlementStateId
        WHERE sw.settlementWindowId = :settlementWindowId
        group by
        ft.determiningTransferId,
        ssc.settlementStateId,
        ssc.createdDate;
  template: |
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <style>
            body {
                font-family: 'Arial', sans-serif;
                background-color: #f5f5f5;
                margin: 0;
                padding: 20px;
                color: #333;
            }

            .container {
                max-width: 100%;
                margin: 0 auto;
                background-color: #fff;
                padding: 20px;
                box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            }

            .grid-container {
                display: grid;
                grid-template-columns: repeat(2, 1fr);
                gap: 20px;
            }

            .grid-block {
                padding: 2px;
                border-radius: 8px;
            }

            .header {
                display: flex;
                justify-content: space-between;
                align-items: center;
                border-bottom: 2px solid #00447c;
                padding-bottom: 10px;
            }

            .header h1 {
                margin: 0;
                color: #00447c;
                font-size: 24px;
            }

            .header img {
                max-height: 50px;
            }

            .summary {
                margin-top: 20px;
                padding: 15px;
                background-color: #e9f3fa;
                border-left: 6px solid #00447c;
                border-radius: 5px;
                box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
                max-width: 500px;
            }

            .summary p {
                margin: 5px 0;
                font-weight: bold;
            }

            table {
                font-family: arial, sans-serif;
                border-collapse: collapse;
                width: 100%;
                display: block;
                overflow-x: auto;
                white-space: nowrap;
            }

            table, th, td {
                border: 1px solid #ddd;
            }

            th {
                background-color: #00447c;
                color: #fff;
                padding: 10px;
                font-size: 1.0em;
            }

            td {
                line-height: 1.6;
                padding: 10px;
                text-align: left;
                font-size: 0.9em;
            }

            tr:nth-child(even) {
                background-color: #f2f2f2;
            }

            .smallFont {
                font-size: 0.7em;
            }

            .thStyle {
                background-color: #00447c;
                color: #fff;
                padding: 10px;
                font-size: 1.0em;
            }

            .button-link {
                display: inline-block;
                padding: 10px 20px;
                font-size: 16px;
                color: #fff;
                background-color: #007bff;
                text-decoration: none;
                border-radius: 5px;
                transition: background-color 0.3s, transform 0.2s;
                font-weight: 500;
                box-shadow: 0 4px 8px rgba(0, 123, 255, 0.2);
            }

            .button-link:hover {
                background-color: #0056b3;
                transform: translateY(-2px);
                box-shadow: 0 6px 12px rgba(0, 86, 179, 0.3);
            }

            .button-link:active {
                transform: translateY(0);
                box-shadow: 0 4px 8px rgba(0, 86, 179, 0.2);
            }

            .highlight-link {
                color: #007bff;
                text-decoration: none;
                padding: 3px 5px;
                border-radius: 3px;
                transition: background-color 0.2s, color 0.2s;
            }

            .highlight-link:hover {
                background-color: #00447c;
                color: white;
            }

            .footer {
                margin-top: 20px;
                text-align: center;
                font-size: 0.9em;
                color: #666;
            }

            .footer p {
                margin: 5px 0;
            }
        </style>
        <title>FSP Reconciliation Report</title>
    </head>
    <body>
      <%
          const formatAmount = (amount) => parseFloat(amount).toLocaleString('en-US');

          const participantCurrencyMap = {};
          for (let row of allParticipantCurrencyIds) {
              participantCurrencyMap[row.participantCurrencyId] = {
                  currencyId: row.currencyId,
                  name: row.name,
                  participantId: row.participantId
              };
          }
          const latestSettlementWindowStateMap = {};
          for (let row of getLatestSettlementWindowState) {
            latestSettlementWindowStateMap[row.settlementWindowId] = row.settlementWindowStateId;
          }

          const fxQuoteConversionTerms = {};
          for (let row of getFxQuoteConversionTerms) {
              fxQuoteConversionTerms[row.determiningTransferId] = row;
          }

          const settlementByDeterminingTransferId = {};
          for (let row of getSettlementsByDeterminingTransferId) {
              settlementByDeterminingTransferId[row.determiningTransferId] = row;
          }

          const report = [];
          for (let movement of getFxPositionMovementsForSettlementWindow) {
              const participantCurrency = participantCurrencyMap[movement.participantCurrencyId];
              const otherMovement = getFxPositionMovementsForSettlementWindow.find(
                  m => m.transferId === movement.transferId && m.participantCurrencyId !== movement.participantCurrencyId
              );
              const otherParticipantCurrency = participantCurrencyMap[otherMovement.participantCurrencyId];
              if (participantCurrency.participantId !== dfspInfo[0]?.participantId && otherParticipantCurrency.participantId !== dfspInfo[0]?.participantId) {
                  continue;
              }
              if (otherMovement) {
                  const index = getFxPositionMovementsForSettlementWindow.indexOf(otherMovement);
                  if (index > -1) {
                      getFxPositionMovementsForSettlementWindow.splice(index, 1);
                  }
              }
              const isPayer = movement.netAmount > 0;
              const isSentOrReceived = isPayer && participantCurrency.name == dfspInfo[0]?.name;
              const isFx = fxQuoteConversionTerms.hasOwnProperty(movement.transferId)
              let transactionType = isFx ? 'Currency Conversion' : null;
              let transactionNature = isFx ? 'Payer initiated' : null;

              let payerIdentifierType = 'N/A';
              let payerIdentifierValue = 'N/A';
              let payeeIdentifierType = 'N/A';
              let payeeIdentifierValue = 'N/A';
              let payerFspName = isPayer ? participantCurrency.name : otherParticipantCurrency.name
              let payeeFspName = isPayer ? otherParticipantCurrency.name : participantCurrency.name

              if (fxQuoteConversionTerms[movement.transferId].initiatingFsp === payerFspName) {
                payeeFspName = payeeFspName + `(${fxQuoteConversionTerms[movement.transferId].counterPartyFsp})`;
              }
              if (fxQuoteConversionTerms[movement.transferId].counterPartyFsp === payerFspName) {
                payeeFspName = payeeFspName + `(${fxQuoteConversionTerms[movement.transferId].initiatingFspId})`;
              }
              const isSettled = settlementByDeterminingTransferId[movement.transferId]?.settlementState === 'SETTLED';
              report.push({
                  quoteId: fxQuoteConversionTerms[movement.transferId].conversionRequestId,
                  senderDFSPId: isPayer ? participantCurrency.participantId : otherParticipantCurrency.participantId,
                  senderDFSPName: payerFspName,
                  receiverDFSPId: isPayer ? otherParticipantCurrency.participantId : participantCurrency.participantId,
                  receiverDFSPName: payeeFspName,
                  hubTxnID: movement.transferId,
                  transactionType: transactionType,
                  natureOfTxnType: transactionNature,
                  requestDate: fxQuoteConversionTerms[movement.transferId].createdDate,
                  createdDate: movement.fxTransferCreatedDate,
                  settlementDate: isSettled ? settlementByDeterminingTransferId[movement.transferId]?.settlementStateChangeDate : 'Null',
                  senderCountryCurrencyCode: isPayer ? participantCurrency.currencyId : otherParticipantCurrency.currencyId,
                  receiverCountryCurrencyCode: isPayer ? otherParticipantCurrency.currencyId : participantCurrency.currencyId,
                  lastModifiedDate: new Date(movement.swClosedCreated || movement.swOpenCreated),
                  senderId: payerIdentifierValue,
                  receiverId: payeeIdentifierValue,
                  reconciliationAmount: isSentOrReceived ? movement.netAmount : `-${movement.netAmount}`,
                  receiverNameStatus: 'N/A',
                  pricingOption: 'N/A',
                  receiverKYCLevelStatus: 'N/A',
                  status: 'N/A',
                  modificationDate: 'N/A',
                  errorCode: 'N/A',
                  senderDFSPTxnID: 'N/A',
                  receiverDFSPTxnID: 'N/A',
                  settlementWindowId: movement.settlementWindowId,
                  settlementState: latestSettlementWindowStateMap[movement.settlementWindowId],
                  settlementStateChangeDate: settlementByDeterminingTransferId[movement.transferId]?.settlementStateChangeDate
              });
          }
          legacyTransferReport.push(...report);
      %>
      <div class="container" data-json="<%= JSON.stringify(legacyTransferReport) %>" >
        <div class="header">
            <h1>FSP Reconciliation Report</h1>
            {{- if .Values.templates.topBarLogoUrl -}}
            <img src="{{ .Values.templates.topBarLogoUrl }}" alt="Logo">
            {{- end }}
        </div>
        <table>
            <tr>
                <% for(let k of Object.keys(legacyTransferReport[0] || {})) { %>
                  <td><%= k %></td>
                <% } %>
            </tr>

            <% for(let r of legacyTransferReport) { %>
            <tr>
              <% for(let k of Object.keys(r)) { %>

                    <td><%= r[k] %></td>
              <% } %>
            </tr>
            <% } %>
        </table>
        <div class="footer">
            <p>Generated on: <%= (new Date()).toUTCString() %></p>
        </div>
      </div>
    </body>
    </html>
{{- end }}
