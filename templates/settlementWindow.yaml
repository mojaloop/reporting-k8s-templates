{{- if .Values.templates.settlementWindow -}}

apiVersion: mojaloop.io/v1
kind: MojaloopReport
metadata:
  name: {{ printf "%s-%s" .Release.Name "settlement-window" | trimPrefix "-" }}
  {{ include "common.annotations" . | nindent 2 }}
spec:
  permission: report-settlement-window
  endpoint:
    path: /settlementWindow
  queries:
    - name: getLatestSettlementWindowState
      query: |
        SELECT settlementWindowId, settlementWindowStateId
        FROM (
        SELECT settlementWindowId, settlementWindowStateId,
            ROW_NUMBER() OVER (PARTITION BY settlementWindowId ORDER BY createdDate DESC) as rn
        FROM central_ledger.settlementWindowStateChange
        ) t
        WHERE rn = 1;
    - name: allParticipantCurrencyIds
      query: >
        SELECT
          pc.participantCurrencyId,
          pc.participantId,
          pc.currencyId,
          p.name,
          p.description,
          p.isProxy
        FROM participantCurrency AS pc
        INNER JOIN
            participant AS p
            ON pc.participantId = p.participantId
        ORDER BY pc.participantCurrencyId;
    - name: getPositionMovementsPerSettlementWindow
      query: |
        SELECT
          result1.settlementWindowId as settlementWindowId,
          result1.participantCurrencyId as participantCurrencyId,
          SUM(result1.amount) as netAmount,
          result1.swOpenCreated,
          result1.swClosedCreated
        FROM
          (
            SELECT
              sw.settlementWindowId,
              pc.participantCurrencyId,
            swOpen.createdDate as swOpenCreated,
            swClose.createdDate as swClosedCreated,
              unioned.transferId,
              unioned.uniqueLegId,
              SUM(unioned.change) as amount
            FROM
              (
                SELECT
                  ppc.participantCurrencyId,
                  ppc.change,
                  tf.settlementWindowId,
                  tf.transferId AS transferId,
                  tf.transferId AS uniqueLegId
                FROM
                  transferFulfilment AS tf
                  INNER JOIN transferStateChange AS tsc ON tsc.transferId = tf.transferId
                  INNER JOIN participantPositionChange AS ppc ON ppc.transferStateChangeId = tsc.transferStateChangeId
                  INNER JOIN settlementSettlementWindow ssw ON tf.settlementWindowId = ssw.settlementWindowId
                  INNER JOIN settlementParticipantCurrency AS spc ON ppc.participantCurrencyId = spc.participantCurrencyId
                  AND spc.settlementId = ssw.settlementId
                UNION ALL
                SELECT
                  ppc.participantCurrencyId,
                  ppc.change,
                  fxtf.settlementWindowId,
                  fxt1.determiningTransferId AS transferId,
                  fxt1.commitRequestId AS uniqueLegId
                FROM
                  fxTransferFulfilment AS fxtf
                  INNER JOIN fxTransfer AS fxt1 ON fxt1.commitRequestId = fxtf.commitRequestId
                  INNER JOIN fxTransferStateChange AS fxtsc ON fxtsc.commitRequestId = fxtf.commitRequestId
                  INNER JOIN participantPositionChange AS ppc ON ppc.fxTransferStateChangeId = fxtsc.fxTransferStateChangeId
                  INNER JOIN settlementSettlementWindow ssw ON fxtf.settlementWindowId = ssw.settlementWindowId
                  INNER JOIN settlementParticipantCurrency AS spc ON ppc.participantCurrencyId = spc.participantCurrencyId
                  AND spc.settlementId = ssw.settlementId
              ) AS unioned
              INNER JOIN participantCurrency AS pc ON pc.participantCurrencyId = unioned.participantCurrencyId
              INNER JOIN settlementWindow as sw ON sw.settlementWindowId = unioned.settlementWindowId
              INNER JOIN central_ledger.settlementWindowStateChange AS swOpen ON swOpen.settlementWindowId = unioned.settlementWindowId
              LEFT OUTER JOIN central_ledger.settlementWindowStateChange AS swClose ON swClose.settlementWindowId = unioned.settlementWindowId
              AND swClose.settlementWindowStateId = 'CLOSED'
            WHERE
              swOpen.settlementWindowStateId = 'OPEN'
            GROUP BY
              sw.settlementWindowId,
              pc.participantCurrencyId,
            swOpen.createdDate,
            swClose.createdDate,
              unioned.transferId,
              unioned.uniqueLegId
            ORDER BY
              unioned.transferId
          ) as result1
        GROUP BY
          result1.settlementWindowId,
          result1.participantCurrencyId,
          result1.swOpenCreated,
          result1.swClosedCreated

  template: |
    <!DOCTYPE html>
    <html lang="en">

    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>FSP Settlement Report</title>
        <style>
            body {
                font-family: 'Arial', sans-serif;
                background-color: #f5f5f5;
                margin: 0;
                padding: 20px;
                color: #333;
            }

            .container {
                max-width: 100%;
                margin: 0 auto;
                background-color: #fff;
                padding: 20px;
                box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            }

            .grid-container {
                display: grid;
                grid-template-columns: repeat(2, 1fr);
                gap: 20px;
            }

            .grid-block {
                padding: 2px;
                border-radius: 8px;
            }

            .header {
                display: flex;
                justify-content: space-between;
                align-items: center;
                border-bottom: 2px solid #00447c;
                padding-bottom: 10px;
            }

            .header h1 {
                margin: 0;
                color: #00447c;
                font-size: 24px;
            }

            .header img {
                max-height: 50px;
            }

            .summary {
                margin-top: 20px;
                padding: 15px;
                background-color: #e9f3fa;
                border-left: 6px solid #00447c;
                border-radius: 5px;
                box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
                max-width: 500px;
            }

            .summary p {
                margin: 5px 0;
                font-weight: bold;
            }

            table {
                width: 100%;
                border-collapse: collapse;
                margin-top: 20px;
            }

            table, th, td {
                border: 1px solid #ddd;
            }

            th {
                background-color: #00447c;
                color: #fff;
                padding: 10px;
                font-size: 1.0em;
            }

            td {
                line-height: 1.6;
                padding: 10px;
                text-align: left;
                font-size: 0.9em;
            }

            tr:nth-child(even) {
                background-color: #f2f2f2;
            }

            .smallFont {
                font-size: 0.7em;
            }

            .thStyle {
                background-color: #00447c;
                color: #fff;
                padding: 10px;
                font-size: 1.0em;
            }

            .button-link {
                display: inline-block;
                padding: 10px 20px;
                font-size: 16px;
                color: #fff;
                background-color: #007bff;
                text-decoration: none;
                border-radius: 5px;
                transition: background-color 0.3s, transform 0.2s;
                font-weight: 500;
                box-shadow: 0 4px 8px rgba(0, 123, 255, 0.2);
            }

            .button-link:hover {
                background-color: #0056b3;
                transform: translateY(-2px);
                box-shadow: 0 6px 12px rgba(0, 86, 179, 0.3);
            }

            .button-link:active {
                transform: translateY(0);
                box-shadow: 0 4px 8px rgba(0, 86, 179, 0.2);
            }

            .highlight-link {
                color: #007bff;
                text-decoration: none;
                padding: 3px 5px;
                border-radius: 3px;
                transition: background-color 0.2s, color 0.2s;
            }

            .highlight-link:hover {
                background-color: #00447c;
                color: white;
            }

            .footer {
                margin-top: 20px;
                text-align: center;
                font-size: 0.9em;
                color: #666;
            }

            .footer p {
                margin: 5px 0;
            }
        </style>
    </head>
    <body>
      <div class="container" >
        <div class="header">
            <h1>FSP Settlement Report</h1>
            <img src="" alt="Logo">
        </div>
        <%
          const latestSettlementWindowStateMap = {};
          for (let row of getLatestSettlementWindowState) {
            latestSettlementWindowStateMap[row.settlementWindowId] = row.settlementWindowStateId;
          }

          const participantCurrencyMap = {};
          for (let row of allParticipantCurrencyIds) {
            participantCurrencyMap[row.participantCurrencyId] = {
              currencyId: row.currencyId,
              name: row.name
            };
          }

            const reportGroupedByCurrency = {};
            for (let row of getPositionMovementsPerSettlementWindow) {
            const currencyInfo = participantCurrencyMap[row.participantCurrencyId];
            const state = latestSettlementWindowStateMap[row.settlementWindowId];
            const reportEntry = {
              fspId: currencyInfo.name,
              settlementWindowId: row.settlementWindowId,
              state: state,
              currency: currencyInfo.currencyId,
              netPosition: row.netAmount,
              windowOpen: new Date(row.swOpenCreated)
            };

            if (!reportGroupedByCurrency[currencyInfo.currencyId]) {
              reportGroupedByCurrency[currencyInfo.currencyId] = [];
            }
            reportGroupedByCurrency[currencyInfo.currencyId].push(reportEntry);
            }
        %>

        <table cellpadding='0' cellspacing='0' data-json="<%= JSON.stringify(reportGroupedByCurrency) %>">
              <tr>
                  <td>fspId</td>
                  <td>settlementWindowId</td>
                  <td>state</td>
                  <td>currency</td>
                  <td>netPosition</td>
                  <td>windowOpen</td>
              </tr>
                <% for (const [currency, entries] of Object.entries(reportGroupedByCurrency)) { %>
                  <tr>
                    <td colspan="6" class="thStyle"><%= currency %></td>
                  </tr>
                  <% for (const entry of entries) { %>
                  <tr>
                    <td><%= entry.fspId %></td>
                    <td><%= entry.settlementWindowId %></td>
                    <td><%= entry.state %></td>
                    <td><%= entry.currency %></td>
                    <td><%= entry.netPosition %></td>
                    <td><%= entry.windowOpen.toISOString() %></td>
                  </tr>
                  <% } %>
                <% } %>
          </table>
          <div class="footer">
              <p>Generated on: <%= (new Date()).toUTCString() %></p>
          </div>
        </div>
    </body>
    </html>
{{- end }}
