{{- if .Values.templates.dfspSettlementDetail -}}

apiVersion: mojaloop.io/v1
kind: MojaloopReport
metadata:
  name: {{ printf "%s-%s" .Release.Name "dfsp-settlement-detail" | trimPrefix "-" }}
  {{ include "common.annotations" . | nindent 2 }}
spec:
  endpoint:
    params:
      - name: settlementId
        required: true
      - name: fspId
        required: true
    path: /dfspSettlementDetail
  permission: transferApi
  queries:
    - name: allExternalParticipants
      query: >
        SELECT
        ep.externalParticipantId,
        ep.name as externalParticipantName,
        ep.createdDate,
        ep.proxyId
        FROM externalParticipant AS ep
        ORDER BY ep.externalParticipantId;
    - name: selectedParticipant
      query: >
        SELECT
          p.participantId,
          p.name as name,
          p.createdDate
        FROM participant AS p
        WHERE p.name = :fspId;
    - name: settlementInfoResult
      query: >
        SELECT
            s.settlementId,
            s.createdDate,
            ssc.settlementStateId as currentState,
            ssc.createdDate as lastStateUpdate,
            sSW.createdDate as windowCreatedDate,
            sSW.settlementWindowId,
            MIN(sWSCOpen.createdDate) as windowOpenDate,
            MAX(sWSCClosed.createdDate) as windowClosedDate
        FROM settlement s
        INNER JOIN settlementSettlementWindow sSW
                on s.settlementId = sSW.settlementId
        INNER JOIN settlementWindowStateChange sWSCOpen
                on sSW.settlementWindowId = sWSCOpen.settlementWindowId AND sWSCOpen.settlementWindowStateId = 'OPEN'
        INNER JOIN settlementWindowStateChange sWSCClosed
                on sSW.settlementWindowId = sWSCClosed.settlementWindowId AND sWSCClosed.settlementWindowStateId = 'CLOSED'
        INNER JOIN settlementStateChange ssc
            on s.currentStateChangeId = ssc.settlementStateChangeId
        WHERE s.settlementId = :settlementId
        GROUP BY s.settlementId, sSW.settlementWindowId;
    - name: allParticipantCurrencyIds
      query: >
        SELECT
          pc.participantCurrencyId,
          pc.participantId,
          pc.currencyId,
          p.name,
          p.description,
          p.isProxy
        FROM participantCurrency AS pc
        INNER JOIN
            participant AS p
            ON pc.participantId = p.participantId
        ORDER BY pc.participantCurrencyId;
    - name: settlementParticipantCurrencyIdsResult
      query: >
        SELECT
          result1.participantCurrencyId as debtorParticipantCurrencyId,
          result2.participantCurrencyId as creditorParticipantCurrencyId,
          result1.externalParticipantId as debtorExternalParticipantId,
          result2.externalParticipantId as creditorExternalParticipantId,
          result1.amount as debtorTotalAmount,
          result2.amount as creditorTotalAmount,
          result1.isFxTransfer as isFxTransfer,
          result1.transferId as transferId,
          latestTransfer.latestStateChangeDate as latestStateChangeDate
        FROM

        (
          SELECT
          unioned.participantCurrencyId,
          unioned.transferId,
          unioned.uniqueLegId,
          unioned.pid,
          unioned.externalParticipantId,
          unioned.change as amount,
          unioned.isFxTransfer
          FROM (
          SELECT
            ppc.participantCurrencyId,
            tf.transferId,
            tf.transferId AS uniqueLegId,
            COALESCE(ep.name, pc.participantId) as pid,
            NULL as externalParticipantId,
            ppc.change,
            FALSE as isFxTransfer
          FROM
            transferFulfilment AS tf
          INNER JOIN
            transferStateChange AS tsc
            ON tsc.transferId = tf.transferId
          INNER JOIN
            participantPositionChange AS ppc
            ON ppc.transferStateChangeId = tsc.transferStateChangeId
          INNER JOIN
            settlementParticipantCurrency AS spc
            ON ppc.participantCurrencyId = spc.participantCurrencyId AND spc.settlementId = :settlementId
          INNER JOIN
            settlementSettlementWindow ssw
            ON tf.settlementWindowId = ssw.settlementWindowId AND ssw.settlementId = :settlementId
          LEFT JOIN
            participantCurrency pc
            ON pc.participantCurrencyId = ppc.participantCurrencyId
          LEFT JOIN
            transferParticipant tp
            ON tp.transferId = tf.transferId AND tp.transferParticipantRoleTypeId IN ('1', 'PAYER_DFSP')
          LEFT JOIN
            externalParticipant ep
            ON tp.externalParticipantId = ep.externalParticipantId

          UNION ALL

          SELECT
            ppc.participantCurrencyId,
            fxt1.determiningTransferId AS transferId,
            fxt1.commitRequestId AS uniqueLegId,
            COALESCE(ep.name, pc.participantId) as pid,
            ep.externalParticipantId,
            ppc.change,
            TRUE as isFxTransfer
          FROM
            fxTransferFulfilment AS fxtf
          INNER JOIN
            fxTransfer AS fxt1
            ON fxt1.commitRequestId = fxtf.commitRequestId
          INNER JOIN
            fxTransferStateChange AS fxtsc
            ON fxtsc.commitRequestId = fxtf.commitRequestId
          INNER JOIN
            participantPositionChange AS ppc
            ON ppc.fxTransferStateChangeId = fxtsc.fxTransferStateChangeId
          INNER JOIN
            settlementParticipantCurrency AS spc
            ON ppc.participantCurrencyId = spc.participantCurrencyId AND spc.settlementId = :settlementId
          INNER JOIN
            settlementSettlementWindow ssw
            ON fxtf.settlementWindowId = ssw.settlementWindowId AND ssw.settlementId = :settlementId
          LEFT JOIN
            participantCurrency pc
            ON pc.participantCurrencyId = ppc.participantCurrencyId
          LEFT JOIN
            fxTransferParticipant ftp
            ON ftp.commitRequestId = fxt1.commitRequestId AND ftp.transferParticipantRoleTypeId IN ('6', 'INITIATING')
          LEFT JOIN
            externalParticipant ep
            ON ftp.externalParticipantId = ep.externalParticipantId
          ) AS unioned
          INNER JOIN
          participantCurrency AS pc
          ON pc.participantCurrencyId = unioned.participantCurrencyId
          WHERE unioned.change > 0
          -- No SUM, keep individual movements
          ORDER BY unioned.transferId
        ) as result1

        INNER JOIN
        (
          SELECT
          unioned.participantCurrencyId,
          unioned.transferId,
          unioned.uniqueLegId,
          unioned.pid,
          unioned.externalParticipantId,
          unioned.change as amount,
          unioned.isFxTransfer
          FROM (
          SELECT
            ppc.participantCurrencyId,
            tf.transferId,
            tf.transferId AS uniqueLegId,
            COALESCE(ep.name, pc.participantId) as pid,
            ep.externalParticipantId,
            ppc.change,
            FALSE as isFxTransfer
          FROM
            transferFulfilment AS tf
          INNER JOIN
            transferStateChange AS tsc
            ON tsc.transferId = tf.transferId
          INNER JOIN
            participantPositionChange AS ppc
            ON ppc.transferStateChangeId = tsc.transferStateChangeId
          INNER JOIN
            settlementParticipantCurrency AS spc
            ON ppc.participantCurrencyId = spc.participantCurrencyId AND spc.settlementId = :settlementId
          INNER JOIN
            settlementSettlementWindow ssw
            ON tf.settlementWindowId = ssw.settlementWindowId AND ssw.settlementId = :settlementId
          LEFT JOIN
            participantCurrency pc
            ON pc.participantCurrencyId = ppc.participantCurrencyId
          LEFT JOIN
            transferParticipant tp
            ON tp.transferId = tf.transferId AND tp.transferParticipantRoleTypeId IN ('2', 'PAYEE_DFSP')
          LEFT JOIN
            externalParticipant ep
            ON tp.externalParticipantId = ep.externalParticipantId

          UNION ALL

          SELECT
            ppc.participantCurrencyId,
            fxt1.determiningTransferId AS transferId,
            fxt1.commitRequestId AS uniqueLegId,
            COALESCE(ep.name, pc.participantId) as pid,
            ep.externalParticipantId,
            ppc.change,
            TRUE as isFxTransfer
          FROM
            fxTransferFulfilment AS fxtf
          INNER JOIN
            fxTransfer AS fxt1
            ON fxt1.commitRequestId = fxtf.commitRequestId
          INNER JOIN
            fxTransferStateChange AS fxtsc
            ON fxtsc.commitRequestId = fxtf.commitRequestId
          INNER JOIN
            participantPositionChange AS ppc
            ON ppc.fxTransferStateChangeId = fxtsc.fxTransferStateChangeId
          INNER JOIN
            settlementParticipantCurrency AS spc
            ON ppc.participantCurrencyId = spc.participantCurrencyId AND spc.settlementId = :settlementId
          INNER JOIN
            settlementSettlementWindow ssw
            ON fxtf.settlementWindowId = ssw.settlementWindowId AND ssw.settlementId = :settlementId
          LEFT JOIN
            participantCurrency pc
            ON pc.participantCurrencyId = ppc.participantCurrencyId
          LEFT JOIN
            fxTransferParticipant ftp
            ON ftp.commitRequestId = fxt1.commitRequestId AND ftp.transferParticipantRoleTypeId IN ('7', 'COUNTERPARTY')
            AND (ftp.participantCurrencyId IS NULL OR ftp.participantCurrencyId = pc.participantCurrencyId)
          LEFT JOIN
            externalParticipant ep
            ON ftp.externalParticipantId = ep.externalParticipantId
          ) AS unioned
          INNER JOIN
          participantCurrency AS pc
          ON pc.participantCurrencyId = unioned.participantCurrencyId
          WHERE unioned.change < 0
          -- No SUM, keep individual movements
          ORDER BY unioned.transferId
        ) as result2
        ON result1.transferId = result2.transferId AND result1.uniqueLegId = result2.uniqueLegId

        LEFT JOIN (
          SELECT
            COALESCE(tsc.transferId, fxt.determiningTransferId) AS transferId,
            MAX(COALESCE(tsc.createdDate, fxtsc.createdDate)) AS latestStateChangeDate
            FROM transferStateChange AS tsc
            LEFT JOIN fxTransferStateChange AS fxtsc
            ON tsc.transferId = fxtsc.commitRequestId
            LEFT JOIN fxTransfer AS fxt
            ON fxtsc.commitRequestId = fxt.commitRequestId
            WHERE tsc.transferId IN (
              SELECT transferId FROM transferFulfilment WHERE settlementWindowId = (
                SELECT settlementWindowId FROM settlementSettlementWindow WHERE settlementId = :settlementId
              )
            )
              OR fxtsc.commitRequestId IN (
              SELECT commitRequestId FROM fxTransferFulfilment WHERE settlementWindowId = (
                SELECT settlementWindowId FROM settlementSettlementWindow WHERE settlementId = :settlementId
              )
            )
            GROUP BY COALESCE(tsc.transferId, fxt.determiningTransferId)
        ) AS latestTransfer
        ON result1.transferId = latestTransfer.transferId

        WHERE
          (
          (result1.participantCurrencyId IN (
            SELECT participantCurrencyId
            FROM participantCurrency
            WHERE participantId = (SELECT participantId FROM participant WHERE name = :fspId)
          ))
          OR
          (result2.participantCurrencyId IN (
            SELECT participantCurrencyId
            FROM participantCurrency
            WHERE participantId = (SELECT participantId FROM participant WHERE name = :fspId)
          ))
          )
        ORDER BY latestTransfer.latestStateChangeDate
        -- No GROUP BY, keep individual movements
        ;
  template: |
    <!DOCTYPE html>
    <html lang="en">

    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>DFSP Settlement Detail for <%= selectedParticipant && selectedParticipant[0] ? selectedParticipant[0].name : '' %></title>
        <style>
            body {
                font-family: 'Arial', sans-serif;
                background-color: #f5f5f5;
                margin: 0;
                padding: 20px;
                color: #333;
            }

            .container {
                max-width: 100%;
                margin: 0 auto;
                background-color: #fff;
                padding: 20px;
                box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            }

            .grid-container {
                display: grid;
                grid-template-columns: repeat(2, 1fr);
                gap: 20px;
            }

            .grid-block {
                padding: 2px;
                border-radius: 8px;
            }

            .header {
                display: flex;
                justify-content: space-between;
                align-items: center;
                border-bottom: 2px solid #00447c;
                padding-bottom: 10px;
            }

            .header h1 {
                margin: 0;
                color: #00447c;
                font-size: 24px;
            }

            .header img {
                max-height: 50px;
            }

            .summary {
                margin-top: 20px;
                padding: 15px;
                background-color: #e9f3fa;
                border-left: 6px solid #00447c;
                border-radius: 5px;
                box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
                max-width: 500px;
            }

            .summary p {
                margin: 5px 0;
                font-weight: bold;
            }

            table {
                width: 100%;
                border-collapse: collapse;
                margin-top: 20px;
            }

            table, th, td {
                border: 1px solid #ddd;
            }

            th {
                background-color: #00447c;
                color: #fff;
                padding: 10px;
                font-size: 1.0em;
            }

            td {
                line-height: 1.6;
                padding: 10px;
                text-align: left;
                font-size: 0.9em;
            }

            .main-row {
                background-color: #1980a940;
            }

            .smallFont {
                font-size: 0.7em;
            }

            .thStyle {
                background-color: #00447c;
                color: #fff;
                padding: 10px;
                font-size: 1.0em;
            }

            .button-link {
                display: inline-block;
                padding: 10px 20px;
                font-size: 16px;
                color: #fff;
                background-color: #007bff;
                text-decoration: none;
                border-radius: 5px;
                transition: background-color 0.3s, transform 0.2s;
                font-weight: 500;
                box-shadow: 0 4px 8px rgba(0, 123, 255, 0.2);
            }

            .button-link:hover {
                background-color: #0056b3;
                transform: translateY(-2px);
                box-shadow: 0 6px 12px rgba(0, 86, 179, 0.3);
            }

            .button-link:active {
                transform: translateY(0);
                box-shadow: 0 4px 8px rgba(0, 86, 179, 0.2);
            }

            .highlight-link {
                color: #007bff;
                text-decoration: none;
                padding: 3px 5px;
                border-radius: 3px;
                transition: background-color 0.2s, color 0.2s;
            }

            .highlight-link:hover {
                background-color: #00447c;
                color: white;
            }

            .footer {
                margin-top: 20px;
                text-align: center;
                font-size: 0.9em;
                color: #666;
            }

            .footer p {
                margin: 4px 0;
            }
        </style>
    </head>
    <%
      // Build a map of externalParticipantId to name from allExternalParticipants
      const externalParticipantIdMap = {};
      for (const ep of allExternalParticipants) {
        externalParticipantIdMap[ep.externalParticipantId] = ep;
      }
    %>
    <%
      const settlementInfo = settlementInfoResult[0];
      const dataForJson = {
      settlementInfo,
      tableColumns: [
        { key: "senderFspName", label: "Sender FSP Name" },
        { key: "senderExternalFspName", label: "Sender External FSP Name" },
        { key: "receiverFspName", label: "Receiver FSP Name" },
        { key: "receiverExternalFspName", label: "Receiver External FSP Name" },
        { key: "transferId", label: "Transfer ID" },
        { key: "txType", label: "Tx Type" },
        { key: "txNature", label: "Tx Nature" },
        { key: "lastModified", label: "Last Modified" },
        { key: "receivedAmount", label: "Received Amount" },
        { key: "sentAmount", label: "Sent Amount" },
        { key: "currency", label: "Currency" }
      ],
      tableDataRows: settlementParticipantCurrencyIdsResult.map(tx => {
        const senderCurrency = allParticipantCurrencyIds.find(x => x.participantCurrencyId === tx.debtorParticipantCurrencyId);
        const receiverCurrency = allParticipantCurrencyIds.find(x => x.participantCurrencyId === tx.creditorParticipantCurrencyId);
        return {
        senderFspName: senderCurrency ? senderCurrency.name : 'N/A',
        senderExternalFspName: tx.debtorExternalParticipantId ? (externalParticipantIdMap[tx.debtorExternalParticipantId]?.externalParticipantName || 'N/A') : 'N/A',
        receiverFspName: receiverCurrency ? receiverCurrency.name : 'N/A',
        receiverExternalFspName: tx.creditorExternalParticipantId ? (externalParticipantIdMap[tx.creditorExternalParticipantId]?.externalParticipantName || 'N/A') : 'N/A',
        transferId: tx.transferId || 'N/A',
        txType: tx.isFxTransfer ? 'Currency Conversion' : 'Transfer',
        txNature: tx.isFxTransfer ? 'Payer initiated' : 'N/A',
        lastModified: tx.latestStateChangeDate ? new Date(tx.latestStateChangeDate).toLocaleString() : '',
        receivedAmount: senderCurrency && senderCurrency.name === selectedParticipant[0].name ? '' : (receiverCurrency && receiverCurrency.name === selectedParticipant[0].name ? tx.creditorTotalAmount : ''),
        sentAmount: receiverCurrency && receiverCurrency.name === selectedParticipant[0].name ? '' : (senderCurrency && senderCurrency.name === selectedParticipant[0].name ? tx.debtorTotalAmount : ''),
        currency: senderCurrency ? senderCurrency.currencyId : 'N/A',
        };
      }),
      note: "Each entry in tableDataRows corresponds to a row in the settlement table. The 'Sent Amount' and 'Received Amount' columns are shown from the perspective of the selected participant."
      };

      dataForJson.groupedTableDataRowsByCurrency = dataForJson.tableDataRows.reduce((acc, row) => {
        if (!acc[row.currency]) {
          acc[row.currency] = [];
        }
        acc[row.currency].push(row);
        return acc;
      }, {});
    %>
    %>


    <body data-json="<%= JSON.stringify(dataForJson) %>">
      <div class="container">
        <!-- Header Section -->
        <div class="header">
          <h1>DFSP Settlement Detail for <%= selectedParticipant && selectedParticipant[0] ? selectedParticipant[0].name : '' %></h1>
          {{- if .Values.templates.topBarLogoUrl -}}
          <img src="{{ .Values.templates.topBarLogoUrl }}" alt="Logo">
          {{- end }}
        </div>

        <!-- Settlement Summary Section -->
        <div class="summary">
          <p>Settlement ID: <%= settlementInfo?.settlementId %></p>
          <p>State: <%= settlementInfo?.currentState %></p>
            <p>Earliest Window Start: <%= settlementInfo?.windowOpenDate ? new Date(settlementInfo.windowOpenDate).toLocaleString() : '' %></p>
            <p>Latest Window Finish: <%= settlementInfo?.windowClosedDate ? new Date(settlementInfo.windowClosedDate).toLocaleString() : '' %></p>
            <p>Created Date: <%= settlementInfo?.createdDate ? new Date(settlementInfo.createdDate).toLocaleString() : '' %></p>
            <p>Last State Update: <%= settlementInfo?.lastStateUpdate ? new Date(settlementInfo.lastStateUpdate).toLocaleString() : '' %></p>
        </div>

        <div class="summary" style="margin-bottom: 10px;">
          <p class="smallFont">
            <strong>Note:</strong> "Sent Amount" and "Received Amount" columns are shown from the perspective of the selected participant (<%= selectedParticipant && selectedParticipant[0] ? selectedParticipant[0].name : '' %>).
          </p>
        </div>

        <table>
          <thead>
            <tr>
              <% for (const col of dataForJson.tableColumns) { %>
                <th><%= col.label %></th>
              <% } %>
            </tr>
          </thead>
          <tbody>
            <%
              for (const [currency, rows] of Object.entries(dataForJson.groupedTableDataRowsByCurrency)) {
            %>
              <!-- Spacer row with currency name -->
              <tr>
                <td colspan="<%= dataForJson.tableColumns.length %>" style="background-color: #e9f3fa; font-weight: bold; text-align: left;">
                <%= currency %>
                </td>
              </tr>
              <%
                for (let i = 0; i < rows.length; i++) {
                const row = rows[i];
              %>
              <tr style="<%= i % 2 === 1 ? 'background-color: #f2f2f2;' : '' %>">
                <% for (const col of dataForJson.tableColumns) { %>
                  <td><%= row[col.key] %></td>
                <% } %>
              </tr>
              <% } %>
            <% } %>
          </tbody>
        </table>

        <!--
        <pre>
          <code>
          <%= JSON.stringify(dataForJson, null, 2) %>
          </code>
        </pre>
        -->

        <!-- Footer Section -->
        <div class="footer">
          <p>Generated on: <%= (new Date()).toUTCString() %></p>
        </div>
      </div>
    </body>

    </html>
{{- end }}
