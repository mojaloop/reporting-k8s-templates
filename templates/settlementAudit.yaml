{{- if .Values.templates.settlementAudit -}}

apiVersion: mojaloop.io/v1
kind: MojaloopReport
metadata:
  name: {{ printf "%s-%s" .Release.Name "settlement-audit  " | trimPrefix "-" }}
  {{ include "common.annotations" . | nindent 2 }}
spec:
  permission: report-settlement-audit
  endpoint:
    path: /settlementAudit
    params:
      - name: startDate
        required: true
      - name: endDate
        required: true
  queries:
    - name: dfspInfo
      query: |
        SELECT
            p.participantId,
            p.name,
            :startDate AS startDate,
            :endDate AS endDate,
            pc.currencyId,
            pc.participantCurrencyId,
            lat.name AS accountType
        FROM participant p
        INNER JOIN participantCurrency pc on pc.participantId = p.participantId
        INNER JOIN ledgerAccountType lat on lat.ledgerAccountTypeId = pc.ledgerAccountTypeId
        WHERE p.name != 'Hub' AND lat.name = 'SETTLEMENT'
    - name: report
      query: |
        SELECT
            p.participantId AS participantId,
            p.name AS name,
            pc.currencyId AS currencyId,
            pc.participantCurrencyId AS participantCurrencyId,
            tp.transferId AS transferId,
            tp.createdDate AS createdDate,
            COALESCE(tscIn.transferStateChangeId, tscOut.transferStateChangeId) as transferStateChangeId,
            (CASE WHEN COALESCE(tsIn.enumeration, tsOut.enumeration) != 'ABORTED' THEN 'SUCCESS' ELSE tsOut.enumeration END) AS status,
            COALESCE(tscIn.reason, tscOut.reason) AS description,
            COALESCE(tex1.value, '') AS user,
            COALESCE(tex2.value, '') AS reference,
            (CASE WHEN tp.amount < 0 THEN -tp.amount ELSE NULL END) AS fundsIn,
            (CASE WHEN tp.amount > 0 THEN tp.amount ELSE NULL END) AS fundsOut,
            ppc.value AS balance,
            c.scale AS  currencyScale,
            lat.name AS accountType
        FROM participant p
        INNER JOIN participantCurrency pc ON p.participantId = pc.participantId
        INNER JOIN ledgerAccountType lat ON lat.ledgerAccountTypeId = pc.ledgerAccountTypeId
        INNER JOIN transferParticipant tp ON tp.participantCurrencyId = pc.participantCurrencyId
        INNER JOIN transferParticipantRoleType tpr ON tpr.transferParticipantRoleTypeId = tp.transferParticipantRoleTypeId
        LEFT JOIN transferStateChange tscOut ON tp.transferId = tscOut.transferId AND tscOut.transferStateChangeId = (SELECT MAX(transferStateChangeId) FROM transferStateChange tscOut1 WHERE tscOut1.transferId = tp.transferId
        AND tscOut1.transferStateId in ('RESERVED', 'ABORTED_REJECTED'))
        LEFT JOIN transferState tsOut ON tscOut.transferStateId = tsOut.transferStateId
        LEFT JOIN transferStateChange tscIn ON tp.transferId = tscIn.transferId AND tscIn.transferStateChangeId = (SELECT MAX(transferStateChangeId) FROM transferStateChange tscIn1 WHERE tscIn1.transferId = tp.transferId
        AND tscIn1.transferStateId in ('COMMITTED', 'ABORTED_REJECTED'))
        LEFT JOIN transferState tsIn ON tscIn.transferStateId = tsIn.transferStateId
        INNER JOIN participantPosition pp ON pp.participantCurrencyId = pc.participantCurrencyId
        INNER JOIN participantPositionChange ppc ON ppc.participantPositionId = pp.participantPositionId
        INNER JOIN currency c ON c.currencyId = pc.currencyId
        LEFT JOIN transferExtension tex1 ON tex1.transferId = tp.transferId AND tex1.key = 'user'
        LEFT JOIN transferExtension tex2 ON tex2.transferId = tp.transferId AND tex2.key = 'externalReference'

        WHERE tpr.name = 'DFSP_SETTLEMENT'
        AND (tscIn.transferStateChangeId = ppc.transferStateChangeId OR tscOut.transferStateChangeId = ppc.transferStateChangeId)
        AND tex1.transferExtensionId = (SELECT MAX(transferExtensionId) FROM transferExtension tex1u WHERE tex1u.transferId = tp.transferId AND tex1u.key = 'user')
        AND tex2.transferExtensionId = (SELECT MAX(transferExtensionId) FROM transferExtension tex2u WHERE tex2u.transferId = tp.transferId AND tex2u.key = 'externalReference')
        AND ( tp.createdDate BETWEEN STR_TO_DATE(:startDate, '%Y-%m-%dT%T') AND STR_TO_DATE(:endDate, '%Y-%m-%dT%T'))
        ORDER BY p.name, pc.currencyId, pc.participantCurrencyId,  tp.createdDate
  template: |
    <!DOCTYPE html>

    <html lang="en">

    <head>
        <style>
            body {
                font-family: 'Arial', sans-serif;
                background-color: #f5f5f5;
                margin: 0;
                padding: 20px;
                color: #333;
            }

            .container {
                max-width: 100%;
                margin: 0 auto;
                background-color: #fff;
                padding: 20px;
                box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            }

            .grid-container {
                display: grid;
                grid-template-columns: repeat(2, 1fr);
                gap: 20px;
            }

            .grid-block {
                padding: 2px;
                border-radius: 8px;
            }

            .header {
                display: flex;
                justify-content: space-between;
                align-items: center;
                border-bottom: 2px solid #00447c;
                padding-bottom: 10px;
            }

            .header h1 {
                margin: 0;
                color: #00447c;
                font-size: 24px;
            }

            .header img {
                max-height: 50px;
            }

            .summary {
                margin-top: 20px;
                padding: 15px;
                background-color: #e9f3fa;
                border-left: 6px solid #00447c;
                border-radius: 5px;
                box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
                max-width: 500px;
            }

            .summary p {
                margin: 5px 0;
                font-weight: bold;
            }

            table {
                width: 100%;
                border-collapse: collapse;
                margin-top: 20px;
            }

            table, th, td {
                border: 1px solid #ddd;
            }

            th {
                background-color: #00447c;
                color: #fff;
                padding: 10px;
                font-size: 1.0em;
            }

            td {
                line-height: 1.6;
                padding: 10px;
                text-align: left;
                font-size: 0.9em;
            }

            tr:nth-child(even) {
                background-color: #f2f2f2;
            }

            .smallFont {
                font-size: 0.7em;
            }

            .thStyle {
                background-color: #00447c;
                color: #fff;
                padding: 10px;
                font-size: 1.0em;
            }

            .button-link {
                display: inline-block;
                padding: 10px 20px;
                font-size: 16px;
                color: #fff;
                background-color: #007bff;
                text-decoration: none;
                border-radius: 5px;
                transition: background-color 0.3s, transform 0.2s;
                font-weight: 500;
                box-shadow: 0 4px 8px rgba(0, 123, 255, 0.2);
            }

            .button-link:hover {
                background-color: #0056b3;
                transform: translateY(-2px);
                box-shadow: 0 6px 12px rgba(0, 86, 179, 0.3);
            }

            .button-link:active {
                transform: translateY(0);
                box-shadow: 0 4px 8px rgba(0, 86, 179, 0.2);
            }

            .highlight-link {
                color: #007bff;
                text-decoration: none;
                padding: 3px 5px;
                border-radius: 3px;
                transition: background-color 0.2s, color 0.2s;
            }

            .highlight-link:hover {
                background-color: #00447c;
                color: white;
            }

            .footer {
                margin-top: 20px;
                text-align: center;
                font-size: 0.9em;
                color: #666;
            }

            .footer p {
                margin: 5px 0;
            }
        </style>
        <title> DFSP Settlement Statement</title>
    </head>

    <body>


    <%


    const formatAmount = (amount) => {
      if(amount){
        return parseFloat(amount).toLocaleString('en-US',
          { minimumFractionDigits: report[0]?.currencyScale });
      } else {
        return '';
      }
    }

    %>

    <div class="container">
      <div class="header">
          <h1>Settlement Audit</h1>
          {{- if .Values.templates.topBarLogoUrl -}}
          <img src="{{ .Values.templates.topBarLogoUrl }}" alt="Logo">
          {{- end }}
      </div>
    <% dfspInfo.forEach(element => { // Loop Through all the currency accounts
        const reportData = report.filter( record => record.participantId === element.participantId && record.currencyId === element.currencyId && record.participantCurrencyId === element.participantCurrencyId);
    %>

        <table name=<%= `${element?.name}-${element?.currencyId}` %>>
            <tr>
                <th><span>DFSP </span></th>
                <td style="text-align: left"><%= element?.name %></td>
            </tr>
            <tr>
                <th><span>Account Type</span></th>
                <td style="text-align: left"><%= element?.accountType %></td>
            </tr>
            <tr>
                <th><span>Date From</span></th>
                <td style="text-align: left"><%= element?.startDate %></td>
            </tr>
            <tr>
                <th><span>Date To</span></th>
                <td style="text-align: left"><%= element?.endDate %></td>
            </tr>
            <tr>
                <th><span>Currency</span></th>
                <td style="text-align: left"><%= element?.currencyId %></td>
            </tr>

                   <tr class = "noborder"> <td colspan="100%" style="padding-top: 20px"></td></tr>

            <tr>
                <th>Transfer Id</th>
                <th>Date Time</th>
                <th>Transfer Status</th>
                <th>Process Description</th>
                <th>User</th>
                <th>Reference</th>
                <th>Funds In</th>
                <th>Funds Out</th>
                <th>Balance</th>
            </tr>
            <% for (const { name, currencyId, transferId, createdDate, status, description, user, reference, fundsIn, fundsOut, balance } of reportData) { %>
                <tr>
                    <td><%= `${transferId}` %></td>
                    <td style="text-align: right"><%= createdDate && (d = createdDate, `${d.toLocaleDateString('en-ZA')} ${d.toLocaleTimeString('en-US')}`)%></td>
                    <td><%= `${status}` %></td>
                    <td><%= `${description}` %></td>
                    <td><%= `${user}` %></td>
                    <td><%= `${reference}` %></td>
                    <td style="text-align: right"><%= formatAmount(fundsIn) %></td>
                    <td style="text-align: right"><%= formatAmount(fundsOut) %></td>
                    <td style="text-align: right"><%= formatAmount(balance) %></td>
                </tr>
            <% } %>
        </table>

        <br /><br />

    <% }) %>
    </div>
    </body>

    </html>
{{- end }}
